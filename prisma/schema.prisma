generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["postgresqlExtensions"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            String    @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  name          String?   @default("NO_NAME")
  email         String    @unique(map: "user_email_idx")
  emailVerified DateTime? @db.Timestamp(6)
  image         String?
  password      String?
  createdAt     DateTime  @default(now()) @db.Timestamp(6)
  updatedAt     DateTime  @updatedAt
  boards        Board[]
  accounts      Account[]
  Session       Session[]
}

model Account {
  userId            String  @db.Uuid
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  createdAt DateTime @default(now()) @db.Timestamp(6)
  updatedAt DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@id([provider, providerAccountId])
}

model Session {
  sessionToken String   @id
  userId       String   @db.Uuid
  expires      DateTime @db.Timestamp(6)
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now()) @db.Timestamp(6)
  updatedAt DateTime @updatedAt
}

model VerificationToken {
  identifier String
  token      String
  expires    DateTime

  @@id([identifier, token])
}

// Board schema

model Board {
  id        String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  title     String   @default("Untitled Board") @db.VarChar(100)
  slug      String   @db.VarChar(50)
  userId    String   @db.Uuid
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  lists     List[]
  createdAt DateTime @default(now()) @db.Timestamp(6)
  updatedAt DateTime @updatedAt

  @@unique([userId, slug])
  @@index([userId])
}

model List {
  id        String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  title     String   @default("Untitled List") @db.VarChar(100)
  boardId   String   @db.Uuid
  order     Float    @default(0) @db.Real
  board     Board    @relation(fields: [boardId], references: [id], onDelete: Cascade)
  cards     Card[]
  createdAt DateTime @default(now()) @db.Timestamp(6)
  updatedAt DateTime @updatedAt

  @@index([boardId, order])
}

model Card {
  id        String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  title     String   @default("Untitled Card") @db.VarChar(100)
  content   String?  @db.Text
  listId    String   @db.Uuid
  order     Float    @default(0) @db.Real
  list      List     @relation(fields: [listId], references: [id], onDelete: Cascade)
  createdAt DateTime @default(now()) @db.Timestamp(6)
  updatedAt DateTime @updatedAt

  @@index([listId, order])
}

// prisma/seed.ts
